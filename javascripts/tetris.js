// Generated by CoffeeScript 1.3.3
(function() {
  var Tetris;

  Tetris = (function() {

    function Tetris(width, height) {
      var _i, _ref, _ref1, _results;
      this.width = width;
      this.height = height;
      this.array = this.array_factory();
      this.mid = Math.floor(this.width / 2);
      this.wedge = [this.mid, this.mid + this.width, this.mid + this.width - 1, this.mid + this.width + 1];
      this.square = [this.mid, this.mid + 1, this.mid + this.width, this.mid + this.width + 1];
      this.stick = [this.mid, this.mid + this.width, this.mid + this.width + 1, this.mid + this.width + 2];
      this.twist = [this.mid, this.mid + this.width, this.mid + this.width + 1, this.mid + this.width + 1 + this.width];
      this.tetris_block = [this.wedge, this.square, this.stick, this.twist];
      this.current_block_type = this.block_type_factory();
      this.current_block = this.current_block_factory();
      this.dead_block = (function() {
        _results = [];
        for (var _i = _ref = this.width * (this.height - 1) + 1, _ref1 = this.width * this.height; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
    }

    Tetris.prototype.array_factory = function() {
      var item;
      return this.array = (function() {
        var _i, _ref, _results;
        _results = [];
        for (item = _i = 0, _ref = this.width * this.height; 0 <= _ref ? _i < _ref : _i > _ref; item = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      }).call(this);
    };

    Tetris.prototype.block_type_factory = function() {
      return Math.floor(Math.random() * this.tetris_block.length);
    };

    Tetris.prototype.current_block_factory = function() {
      return this.tetris_block[this.current_block_type];
    };

    Tetris.prototype.to_s = function() {
      var array_item, _i, _len, _ref, _results;
      _ref = this.array;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        array_item = _ref[_i];
        _results.push(array_item);
      }
      return _results;
    };

    Tetris.prototype.clean = function() {
      var item, _i, _len, _ref, _results;
      this.array_factory();
      _ref = this.dead_block;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(this.array[item] = 2);
      }
      return _results;
    };

    Tetris.prototype.block_move_down = function() {
      var item;
      return this.current_block = (function() {
        var _i, _len, _ref, _results;
        _ref = this.current_block;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item + this.width);
        }
        return _results;
      }).call(this);
    };

    Tetris.prototype.block_move_left = function() {
      var item;
      if (!this.touch_left_wall()) {
        return this.current_block = (function() {
          var _i, _len, _ref, _results;
          _ref = this.current_block;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push(item - 1);
          }
          return _results;
        }).call(this);
      }
    };

    Tetris.prototype.block_move_right = function() {
      var item;
      if (!this.touch_right_wall()) {
        return this.current_block = (function() {
          var _i, _len, _ref, _results;
          _ref = this.current_block;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push(item + 1);
          }
          return _results;
        }).call(this);
      }
    };

    Tetris.prototype.show_block = function() {
      var item, _i, _len, _ref, _results;
      _ref = this.current_block;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(this.array[item] = 1);
      }
      return _results;
    };

    Tetris.prototype.touch_left_wall = function() {
      var item, _i, _len, _ref;
      _ref = this.current_block;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if ((item % this.width) === 0) {
          return true;
        } else {
          return false;
        }
      }
      return result;
    };

    Tetris.prototype.touch_right_wall = function() {
      var item, result, _i, _len, _ref;
      _ref = this.current_block;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item % this.width === (this.width - 1)) {
          result = true;
        } else {
          result = false;
        }
      }
      return result;
    };

    Tetris.prototype.touch_bottom = function() {
      var item, result, _i, _len, _ref;
      _ref = this.current_block;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item >= (this.width * (this.height - 1))) {
          result = true;
        } else {
          result = false;
        }
      }
      return result;
    };

    Tetris.prototype.solidify = function() {
      var item, _i, _len, _ref, _results;
      _ref = this.current_block;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(this.dead_block.push(item));
      }
      return _results;
    };

    Tetris.prototype.generate_another_block = function() {
      this.current_block_type = this.block_type_factory();
      return this.current_block = this.current_block_factory();
    };

    Tetris.prototype.clear_current_block = function() {
      var item, _i, _len, _ref;
      _ref = this.current_block;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.array[item] = 0;
      }
      return this.current_block = [];
    };

    Tetris.prototype.touch_dead_block = function() {
      var item, _i, _len, _ref;
      _ref = this.current_block;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (this.array[item + this.height] === 2) {
          return true;
        } else {
          return false;
        }
      }
    };

    Tetris.prototype.any_row_to_kill = function() {
      var col, result, row, row_sum, _i, _j, _ref, _ref1;
      result = new Array;
      for (row = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        row_sum = 0;
        for (col = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          row_sum = row_sum + this.array[row * this.width + col];
        }
        if (row_sum === 2 * this.width) {
          result.push(row);
        }
      }
      return result;
    };

    Tetris.prototype.kill_row = function(n) {
      var item, _i, _ref, _ref1, _results;
      _results = [];
      for (item = _i = _ref = n * this.width, _ref1 = (n + 1) * this.width; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; item = _ref <= _ref1 ? ++_i : --_i) {
        _results.push(this.array[item] = 0);
      }
      return _results;
    };

    Tetris.prototype.drop_block_unit = function(m) {
      if (this.array[m] === 2) {
        this.array[m] = 0;
        return this.array[m + this.width] = 2;
      }
    };

    Tetris.prototype.dead_blocks_above = function(n) {
      var item, result, _i, _ref;
      result = new Array;
      for (item = _i = 0, _ref = n * this.width; 0 <= _ref ? _i < _ref : _i > _ref; item = 0 <= _ref ? ++_i : --_i) {
        if (this.array[item] === 2) {
          result.push(item);
        }
      }
      return result;
    };

    Tetris.prototype.drop_all_dead_blocks_above_row = function(n) {
      var item, result, _i, _len, _ref;
      _ref = this.dead_blocks_above(n);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.drop_block_unit(item);
        result = true;
      }
      return result;
    };

    return Tetris;

  })();

  $(function() {
    var down, left, refresh, right, t;
    t = new Tetris(5, 10);
    refresh = function() {
      var cell_css, item, jtem, n, row, table, _i, _j, _ref, _ref1;
      row = "";
      table = "";
      for (item = _i = 0, _ref = t.height; 0 <= _ref ? _i < _ref : _i > _ref; item = 0 <= _ref ? ++_i : --_i) {
        table = table + "<tr>";
        for (jtem = _j = 0, _ref1 = t.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; jtem = 0 <= _ref1 ? ++_j : --_j) {
          n = jtem + item * t.width;
          if (t.array[n] === 1) {
            cell_css = 'block';
          } else if (t.array[n] === 2) {
            cell_css = 'dead_block';
          } else {
            cell_css = 'cell';
          }
          row = row + ("<td class=" + cell_css + " id=" + n + ">" + n + "</td>");
        }
        table = table + row + "</tr>";
        row = "";
      }
      return $("#frame").html("<table>" + table + "</table>");
    };
    t.clean();
    t.show_block();
    refresh();
    down = function() {
      if (!t.touch_bottom()) {
        if (!t.touch_dead_block()) {
          t.clean();
          t.block_move_down();
          t.show_block();
          return refresh();
        } else {
          t.solidify();
          t.clear_current_block();
          t.generate_another_block();
          t.clean();
          t.show_block();
          return refresh();
        }
      }
    };
    left = function() {
      if (!t.touch_left_wall()) {
        t.clean();
        t.block_move_left();
        t.show_block();
        return refresh();
      }
    };
    right = function() {
      if (!t.touch_right_wall()) {
        t.clean();
        t.block_move_right();
        t.show_block();
        return refresh();
      }
    };
    $("#down_btn").click(down);
    $("#left_btn").click(left);
    $("#right_btn").click(right);
    $("#erase_bottom").click(erase_bottom);
    return $(document).keydown(function(e) {
      switch (e.which) {
        case 37:
          left();

          break;
        case 39:
          right();

          break;
        case 40:
          down();

          break;
        default:
          return;
      }
      return e.preventDefault();
    });
  });

}).call(this);
